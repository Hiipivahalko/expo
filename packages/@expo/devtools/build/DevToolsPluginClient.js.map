{"version":3,"file":"DevToolsPluginClient.js","sourceRoot":"","sources":["../src/DevToolsPluginClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport WebSocket from './WebSocket';\n\n// This version should be synced with the one in the **createMessageSocketEndpoint.ts** in @react-native-community/cli-server-api\nconst MESSAGE_PROTOCOL_VERSION = 2;\n\nconst DevToolsPluginMethod = 'Expo:DevToolsPlugin';\n\n/**\n * This client is for the Expo CLI DevTools Plugins to communicate between the app and the DevTools webpage.\n * All the code should be both compatible with browsers and React Native.\n */\nexport default class DevToolsPluginClient {\n  private ws: WebSocket | null = null;\n  private eventEmitter: EventEmitter = new EventEmitter();\n\n  public constructor(public readonly devServer: string) {}\n\n  /**\n   * Internal and for testing.\n   */\n  public async connectAsync(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(`ws://${this.devServer}/message`);\n      ws.addEventListener('open', () => {\n        this.ws = ws;\n        resolve(ws);\n      });\n      ws.addEventListener('error', (e) => {\n        reject(e);\n      });\n      ws.addEventListener('close', (e) => {\n        console.debug('WebSocket closed', e.code, e.reason);\n        this.ws = null;\n      });\n      ws.addEventListener('message', (e) => {\n        this.handleMessage(e);\n      });\n    });\n  }\n\n  public close() {\n    this.ws?.close();\n    this.ws = null;\n    this.eventEmitter.removeAllListeners();\n  }\n\n  public sendMessage(method: string, params: any): void {\n    const payload = {\n      version: MESSAGE_PROTOCOL_VERSION,\n      method: DevToolsPluginMethod,\n      params: {\n        method,\n        params,\n      },\n    };\n    this.ws?.send(JSON.stringify(payload));\n  }\n\n  public addMessageListener(method: string, listener: (params: any) => void): EventSubscription {\n    return this.eventEmitter.addListener(method, listener);\n  }\n\n  public addMessageListenerOnce(method: string, listener: (params: any) => void): void {\n    this.eventEmitter.once(method, listener);\n  }\n\n  public isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  private handleMessage(event: MessageEvent): void {\n    try {\n      const payload = JSON.parse(event.data);\n      if (payload.version === MESSAGE_PROTOCOL_VERSION && payload.method === DevToolsPluginMethod) {\n        this.eventEmitter.emit(payload.params.method, payload.params.params);\n      }\n    } catch {}\n  }\n}\n"]}