{"version":3,"file":"ExpoSQLiteNext.js","sourceRoot":"","sources":["../../src/next/ExpoSQLiteNext.ts"],"names":[],"mappings":"AAAA,eAAe;IACb,IAAI,IAAI;QACN,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,MAAc,EAAE,OAAiB;QACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAc;QACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,eAAe,CAAC,UAAkB;QAChC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,UAAkB;QAC3C,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,UAAkB;QACzC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,UAAkB,EAAE,MAAc;QAChD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAkB,EAAE,MAAc;QACnD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,sBAAsB,CAC1B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,sBAAsB,CAC1B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC7B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,0BAA0B,CAC9B,UAAkB,EAClB,WAAmB,EACnB,UAAe;QAEf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,UAAkB,EAAE,WAAmB;QAC/D,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,UAAkB,EAAE,WAAmB;QAClE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED,sCAAsC;IAEtC,WAAW,KAAI,CAAC;IAChB,eAAe,KAAI,CAAC;IAEpB,YAAY;CACb,CAAC","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoSQLiteNext';\n  },\n\n  async openDatabaseAsync(dbName: string, options?: unknown): Promise<number> {\n    throw new Error('Unimplemented');\n  },\n\n  async deleteDatabaseAsync(dbName: string): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  isInTransaction(databaseId: number): boolean {\n    throw new Error('Unimplemented');\n  },\n\n  async isInTransactionAsync(databaseId: number): Promise<boolean> {\n    throw new Error('Unimplemented');\n  },\n\n  async closeDatabaseAsync(databaseId: number): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  async execAsync(databaseId: number, source: string): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  async prepareAsync(databaseId: number, source: string): Promise<number> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementArrayRunAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementObjectRunAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementArrayGetAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementObjectGetAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementArrayGetAllAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any[]> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementObjectGetAllAsync(\n    databaseId: number,\n    statementId: number,\n    bindParams: any\n  ): Promise<any[]> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementResetAsync(databaseId: number, statementId: number): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  async statementFinalizeAsync(databaseId: number, statementId: number): Promise<void> {\n    throw new Error('Unimplemented');\n  },\n\n  //#region EventEmitter implementations\n\n  addListener() {},\n  removeListeners() {},\n\n  //#endregion\n};\n"]}