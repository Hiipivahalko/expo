{"version":3,"file":"Statement.js","sourceRoot":"","sources":["../../src/next/Statement.ts"],"names":[],"mappings":"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","sourcesContent":["import ExpoSQLite from './ExpoSQLiteNext';\n\n/**\n * Result of a `runAsync` call.\n */\nexport interface RunResult {\n  /**\n   * The last inserted row ID.\n   */\n  lastID: number;\n\n  /**\n   * The number of rows affected.\n   */\n  changes: number;\n}\n\n/**\n * Bind parameters to the prepared statement.\n * You can either pass the parameters in the following forms:\n *\n * @example\n * - Variadic arguments for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync('test1', 789);\n * ```\n *\n * @example\n * - A single array for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync(['test1', 789]);\n * ```\n *\n * @example\n * - A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n *\n *   Through we support multiple named parameter forms like `:VVV`, `@VVV`, and `$VVV`. We recommend using `$VVV` because JavaScript allows using `$` in identifiers without escaping.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\n * await statement.getAsync({ $value: 'test1', $intValue: 789 });\n * ```\n */\nexport type BindValue = string | number | null | boolean;\nexport type BindParams = Record<string, BindValue> | BindValue[];\nexport type VariadicBindParams = BindValue[];\n\n/**\n * A prepared statement returned by `Database.prepareAsync()` that can be binded with parameters and executed.\n */\nexport class Statement {\n  /**\n   * @internal\n   */\n  constructor(\n    public readonly databaseId: number,\n    public readonly statementId: number\n  ) {}\n\n  /**\n   * Run the prepared statement and return the result.\n   *\n   * @param params @see `BindParams`\n   */\n  public runAsync(...params: VariadicBindParams): Promise<RunResult>;\n  public runAsync(params: BindParams): Promise<RunResult>;\n  public async runAsync(...params: unknown[]): Promise<RunResult> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return await ExpoSQLite.statementObjectRunAsync(\n        this.databaseId,\n        this.statementId,\n        bindParams\n      );\n    } else {\n      return await ExpoSQLite.statementArrayRunAsync(this.databaseId, this.statementId, bindParams);\n    }\n  }\n\n  /**\n   * Iterate the prepared statement and return results as an async iterable.\n   *\n   * @param params @see `BindParams`\n   *\n   * @example\n   * ```ts\n   * const statement = await db.prepareAsync('SELECT * FROM test');\n   * for await (const row of statement.eachAsync<any>()) {\n   *   console.log(row);\n   * }\n   * ```\n   */\n  public eachAsync<T>(...params: VariadicBindParams): AsyncIterableIterator<T>;\n  public eachAsync<T>(params: BindParams): AsyncIterableIterator<T>;\n  public async *eachAsync<T>(...params: unknown[]): AsyncIterableIterator<T> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    const func = shouldPassAsObject\n      ? ExpoSQLite.statementObjectGetAsync\n      : ExpoSQLite.statementArrayGetAsync;\n\n    let result: T | null = null;\n    do {\n      result = await func(this.databaseId, this.statementId, bindParams);\n      if (result != null) {\n        yield result;\n      }\n    } while (result != null);\n  }\n\n  /**\n   * Get one row from the prepared statement.\n   *\n   * @param params @see `BindParams`\n   */\n  public getAsync<T>(...params: VariadicBindParams): Promise<T | null>;\n  public getAsync<T>(params: BindParams): Promise<T | null>;\n  public async getAsync<T>(...params: unknown[]): Promise<T | null> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return await ExpoSQLite.statementObjectGetAsync(\n        this.databaseId,\n        this.statementId,\n        bindParams\n      );\n    } else {\n      return await ExpoSQLite.statementArrayGetAsync(this.databaseId, this.statementId, bindParams);\n    }\n  }\n\n  /**\n   * Get all rows from the prepared statement.\n   *\n   * @param params @see `BindParams`\n   */\n  public allAsync<T>(...params: VariadicBindParams): Promise<T[]>;\n  public allAsync<T>(params: BindParams): Promise<T[]>;\n  public async allAsync<T>(...params: unknown[]): Promise<T[]> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return await ExpoSQLite.statementObjectGetAllAsync(\n        this.databaseId,\n        this.statementId,\n        bindParams\n      );\n    } else {\n      return await ExpoSQLite.statementArrayGetAllAsync(\n        this.databaseId,\n        this.statementId,\n        bindParams\n      );\n    }\n  }\n\n  /**\n   * Reset the prepared statement cursor.\n   */\n  public async resetAsync(): Promise<void> {\n    await ExpoSQLite.statementResetAsync(this.databaseId, this.statementId);\n  }\n\n  /**\n   * Finalize the prepared statement.\n   * > **Note:** Remember to finalize the prepared statement whenever you call `prepareAsync()` to avoid resource leaks.\n   */\n  public async finalizeAsync(): Promise<void> {\n    await ExpoSQLite.statementFinalizeAsync(this.databaseId, this.statementId);\n  }\n}\n\n/**\n * Normalize the bind params to an array or object.\n * @hidden\n */\nexport function normalizeParams(...params: any[]): {\n  params: BindParams;\n  shouldPassAsObject: boolean;\n} {\n  let bindParams = params.length > 1 ? params : (params[0] as BindParams);\n  if (typeof bindParams !== 'object') {\n    bindParams = [bindParams];\n  }\n  const shouldPassAsObject = !Array.isArray(bindParams);\n  return {\n    params: bindParams,\n    shouldPassAsObject,\n  };\n}\n"]}